# Talkify: Real-Time Chat Application

## Introduction
**Talkify** is a real-time chat application built using the **MERN stack** (MongoDB, Express.js, React.js, Node.js). This project serves as a learning platform to gain hands-on experience with modern web development technologies by implementing core chat application features.

## Table of Contents
- [Introduction](#introduction)
- [Project Purpose](#project-purpose)
- [Features](#features)
- [Technologies Used](#technologies-used)
- [Installation](#installation)
- [Folder Structure](#folder-structure)
- [Challenges](#challenges)
- [Limitations](#limitations)
- [Future Enhancements](#future-enhancements)
- [Conclusion](#conclusion)

## Project Purpose
The primary purpose of this project is to:
- Gain expertise in the MERN stack through practical application.
- Implement real-time messaging with **Socket.io**.
- Use **JSON Web Tokens (JWT)** for secure authentication and **cookies** for session management.
- Build a responsive UI with **Tailwind CSS** and **Daisy UI**.

### Target Audience
This application is ideal for users who need a straightforward, real-time chat solution and developers interested in learning MERN stack technologies.

## Features
- **User Registration**: Users create accounts with credentials (full name, username, password), with passwords securely hashed.
- **Authentication/Authorization**: Secure login with JWTs stored in cookies.
- **Real-Time Messaging**: Instant messaging powered by Socket.io.
- **Online Status**: Real-time online user status updates.
- **Self-Messaging**: Users can message themselves for notes or reminders.
- **Search Functionality**: Dynamic user search by prefix or full name.
- **Conversation History**: Viewable past conversations.
- **Responsive Design**: Modern and adaptable design using Tailwind CSS and Daisy UI.

## Technologies Used
- **Backend**: Node.js, Express.js, MongoDB
- **Frontend**: React.js, Redux, React Router
- **Packages**: Mongoose, Axios, bcryptjs, Cookie-parser, Dotenv, Nodemon, Cors, React-hot-toast

## Installation
1. Clone the repository.

### Backend Setup
```bash
cd backend
npm install
npm start
```

### Frontend Setup
```bash
cd frontend
npm install
npm start
```

## Folder Structure
- **Models**: Data models for MongoDB collections.
- **Controllers**: Business logic and data handling.
- **Routes**: API endpoints for user actions (login, register, send messages, etc.).

## Challenges
- **Search Functionality**: Initial limitations for exact match search were improved with prefix search logic.
- **Self-Messaging**: Backend and frontend adjustments to handle self-messaging as a unique case.

## Limitations
- **No Group Chat**: Currently limited to one-on-one messaging.
- **Basic UI**: UI could be enhanced for a more polished appearance.

## Future Enhancements
- **Group Chat**: Add group chat capabilities.
- **Message Reactions**: Implement emoji reactions.
- **File Sharing**: Enable sharing files within chats.
- **Advanced Search**: Add fuzzy matching and filters.
- **UI/UX Improvements**: Further design and usability enhancements.

## Conclusion
**Reflection**: This project provided in-depth insights into full-stack development with the MERN stack. Overcoming technical challenges improved understanding and problem-solving skills.

**Future Plans**: Further development includes group chat features, user feedback integration, and UI refinement.
